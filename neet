#!/bin/fish
#
# neet - A script to easily play and manage your anime/drama/series
# onodera, https://github.com/onodera-punpun

## CONFIGURATION

# Set config dir location
set configdir $HOME/.neet


## FUNCTIONS

# This function creates the user config files and dir
function init
	if not test -f $configdir/config -a -f $configdir/list
		echo "$configdir/config or $configdir/list not found." >/dev/stderr
		exit 1
	end
end

# This function gets basic media info, like the active show name, episode count and total episodes
function info
	# Get the active show (+)
	set active (grep -B 1 '+' $configdir/list)

	# Get the show name, current episode and total episode count
	set -g name $active[1]

	if not set -q current
		set -g current (string match -r -a '[0-9]+' $active[2] | head -n 1)
	end
	set -g total (string match -r -a '[0-9]+' $active[2] | tail -n 1)

	# Debug output
	if test $debug = true
		echo 'function info'
		echo "$dark-> "$foreground"name: $name"
		echo "$dark-> "$foreground"current: $current"
		echo "$dark-> "$foreground"total: $total"

		return
	end
end

# This function tries to fuzzy find the right directory
function directory
	source $configdir/alias

	# Check if the show already has an alias
	if test "$realias" = false -a "$debug" = false
		if string match -r -q $name $alias[1]
			set -g path $alias[2]
			return
		end
	end

	# Lists all directories in mediadir
	set -g directories (find $mediadir/* -maxdepth 0 -type d | string replace -r '.*/' '')

	# This is the actual fuzzy logic part, it compares the directory names with the active show name
	set matches (
		for directory in $directories
			set match 0

			for word in (string split ' ' $name)
				set wordmatch (string match -r -i -a -n $word $directory | string replace -r '.* ' '')
				if test $status -ge 1
					continue
				end
				set wordmatch (string join ' + ' $wordmatch)

				set match (math $match + $wordmatch)
			end

			echo $match $directory
		end | sort -n
	)

	# This gets the output with the most matches
	set -g path (echo $matches[-1] | cut -d ' ' -f 2-)

	# Debug output
	if test $debug = true
		echo 'function directory'
		echo "$dark-> "$foreground"directories:"
		for line in $directories
			echo "$dark-> -> $foreground$line"
		end
		echo "$dark-> "$foreground"matches:"
		for line in $matches
			echo "$dark-> -> $foreground$line"
		end
		echo "$dark-> "$foreground"path: $path"

		return
	end

	# Create alias
	if test -n $path
		echo 'Show initialized (alias set).'
		echo 'set alias '(string escape $name)' '(string escape $path) >$configdir/alias
	else
		echo "No "$bright"directory$foreground match." >/dev/stderr
		exit 1
	end
end

# This function tries to get the right file name
function episode
	# Lists all video files in the directory
	set episodes (find $mediadir/$path -type f -regex '.*\.\(avi\|mkv\|mp4\)\(\.part\|\)$' | string replace -r '.*/' '')

	# Sets the right file (hopefully)
	# 'E01', 'EP01'
	set -g file (string match -r -i '.*(E|EP)[0]*'$current'[^0-9].*$' $episodes | head -n 1)
	if not set -q file
		# ' 01', _01' '-01'
		set -g file (string match -r -i '.*( |_|-)[0]*'$current'[^0-9].*$' $episodes | head -n 1)
		if not set -q file
			# Last resort (just the episode number)
			set -g file (string match -r -i '.*'$current'[^0-9].*$' $episodes | head -n 1)
		end
	end

	# Debug output
	if test $debug = true
		echo 'function episode'
		echo "$dark-> "$foreground"episodes:"
		for line in $episodes
			echo "$dark-> -> $foreground$line:"
		end
		echo "$dark-> "$foreground"file: $file (matching part: "(string match -r -i '[^1-9][0]*'$current'[^0-9]' $episodes)")"

		return
	end

	# Throw error if no file is found
	if not set -q file
		echo "No "$bright"episode$foreground match." >/dev/stderr
		exit 1
	end
end

# This function executes the userfunction and starts mpv
function play
	# Debug output
	if test $debug = true
		echo 'function play'
		echo "$dark-> $foreground$playercommand "(string escape $mediadir/$path/$file)
		exit 0
	end

	echo "Playing episode $current/$total, $bright$name$foreground."
	if string match -r -q '.part$' $file
		echo 'This episode has not finished downloading yet.'
		echo 'Playback might be buggy or not work at all!'
	end

	# Execute user set config function
	userfunction

	# Start mpv
	eval {$playercommand} (string escape $mediadir/$path/$file)
end


## EXECUTE

# Initialize values
set debug false
set realias false

# Create and load config
init
source $configdir/config

# Load colors
set foreground (set_color $foreground)
set bright (set_color $bright)
set dark (set_color $dark)

if test (count $argv) -eq 1
	switch $argv
		case -h --help
			echo -e 'Usage: neet [options] [-/+]\n'
			echo 'options:'
			echo '  -e,   --edit            edit list'
			echo '  -d,   --debug           print some helpful debug ouput'
			echo '  -a,   --alias           forgets current alias'
			echo '  -h,   --help            print help and exit'
			exit 0
		case -e --edit
			eval $EDITOR $configdir/list
			exit 0
		case -d --debug
			set debug true

			info
		case -a --alias
			set realias true

			info
		case '+*'
			# Fail if there is a non + character in argv
			if test -n (string trim -c '+' $argv)
				echo 'Invalid option, use -h for help.' >/dev/stderr
				exit 1
			end

			info

			# Get current episode and increment it by one
			set amount (string length $argv)
			set increment (math $current + $amount)

			if test $increment -le $total
				sed -i "s/+ $current\/$total/+ $increment\/$total/" "$configdir/list"
				set current $increment
			else
				echo "Episode $total is the last episode." >/dev/stderr
				exit 1
			end
		case '-*'
			# Fail if there is a non - character in argv
			if test -n (string trim -c '-' -- $argv)
				echo 'Invalid option, use -h for help.' >/dev/stderr
				exit 1
			end

			info

			# Get current episode and decrement it by one
			set amount (string length -- $argv)
			set decrement (math $current - $amount)

			if test $decrement -ge 1
				sed -i "s/+ $current\/$total/+ $decrement\/$total/" $configdir/list
				set current $decrement
			else
				echo 'There is no episode 0.' >/dev/stderr
				exit 1
			end
		case '*'
			echo 'Invalid option, use -h for help.' >/dev/stderr
			exit 1
	end
else
	info
end

directory
episode
play
