#!/bin/fish
#
# neet - A script to easily play and manage your anime/drama/series
# onodera, https://github.com/onodera-punpun

## CONFIGURATION

# Set config dir location
set configdir $HOME/.neet


## FUNCTIONS

# This function gets basic media info, like the active show name, episode count and total episodes
function info
	# Get the active show (+)
	set active (grep -B 1 '+' $configdir/list)

	# Get the show name, current episode and total episode count
	set -g name $active[1]

	if not set -q current
		set -g current (string match -r -a '[0-9]+' $active[2] | head -n 1)
	end
	set -g total (string match -r -a '[0-9]+' $active[2] | tail -n 1)

	# Debug output
	if test $debug = true
		echo 'function info'
		echo "$dark-> "$foreground"name: $name"
		echo "$dark-> "$foreground"current: $current"
		echo "$dark-> "$foreground"total: $total"

		return
	end
end

# This function tries to fuzzy find the right directory
function directory
	source $configdir/alias

	# Check if the show already has an alias, or if debug is enabled, return if that's the case
	if test "$realias" = false -a "$debug" = false
		if string match -q -r $name $alias[1]
			set -g path $alias[2]
			return
		end
	end

	# Lists all directories in mediadir
	set -g directories (find $mediadir/* -maxdepth 0 -type d | string replace -r '.*/' '')

	# This is the actual fuzzy logic part, it compares the directory names with the active show name
	set matches (
		for directory in $directories
			set match 0

			for word in (string split ' ' $name)
				set wordmatch (string match -r -i -a -n $word $directory | string replace -r '.* ' '')
				if test $status -ge 1
					continue
				end
				set wordmatch (string join ' + ' $wordmatch)

				set match (math $match + $wordmatch)
			end

			echo $match $directory
		end | sort -n
	)

	# This gets the output with the most matches
	set -g path (echo $matches[-1] | cut -d ' ' -f 2-)

	# Debug output
	if test $debug = true
		echo 'function directory'
		echo "$dark-> "$foreground"directories:"
		for line in (seq (count $matches))
			echo "$dark-> -> $foreground"(echo $matches[$line] | cut -d ' ' -f 2-)
			if test (echo $matches[$line] | cut -d ' ' -f 1) -ge 1
				echo "$dark-> -> -> "$foreground"matches: "(echo $matches[$line] | cut -d ' ' -f 1)
			end
		end
		echo "$dark-> "$foreground"path: $path"

		return
	end

	# Create alias
	if not set -q file
		echo 'set alias '(string escape $name)' '(string escape $path) >$configdir/alias
	else
		# Throw an error if no file is found
		echo "No "$bright"directory$foreground match." >/dev/stderr
		exit 1
	end
end

# This function tries to get the right file name
function episode
	# Lists all video files in the directory
	set episodes (find $mediadir/$path -type f -regex '.*\.\(avi\|mkv\|mp4\|flv\)\(\.part\|\)$' | string replace -r '.*/' '')

	# Sets the right file (hopefully)
	# regex 1
	set -g file (string match -r -i '.*(e|ep|episode)[0 ]*'$current'[^0-9].*$' $episodes | head -n 1)
	if test -z "$file"
		# regex 2
		set -g file (string match -r -i '.*( |_|-|\.)[0 ]*'$current'[^0-9].*$' $episodes | head -n 1)
		if test -z "$file"
			# regex 3
			set -g file (string match -r -i '.*'$current'[^0-9].*$' $episodes | head -n 1)
		end
	end

	# Debug output
	if test $debug = true
		echo 'function episode'
		echo "$dark-> "$foreground"episodes:"
		for line in $episodes
			echo "$dark-> -> $foreground$line"
			if string match -q -r -i '.*(e|ep|episode)[0 ]*'$current'[^0-9].*$' $line
				echo "$dark-> -> -> "$foreground"match (regex 1): "(string match -r -i '(e|ep|episode)[0 ]*'$current'[^0-9]' $line | head -n 1)
			end
			if string match -q -r -i '.*( |_|-|\.)[0 ]*'$current'[^0-9].*$' $line
				echo "$dark-> -> -> "$foreground"match (regex 2): "(string match -r -i '( |_|-|\.)[0 ]*'$current'[^0-9]' $line | head -n 1)
			end
			if string match -q -r -i '.*'$current'[^0-9].*$' $line
				echo "$dark-> -> -> "$foreground"match (regex 3): "(string match -r -i $current'[^0-9]' $line | head -n 1)
			end
		end
		echo "$dark-> "$foreground"file: $file"

		return
	end

	# Throw an error if no file is found
	if not set -q file
		echo "No "$bright"episode$foreground match." >/dev/stderr
		exit 1
	end
end

# This function executes the userfunction and starts mpv
function play
	# Debug output
	if test $debug = true
		echo 'function play'
		echo "$dark-> $foreground$playercommand "(string escape $mediadir/$path/$file)
		exit 0
	end

	echo "Playing episode $current/$total, $bright$name$foreground."

	# Send warning on .part prefix
	if string match -q -r '.part$' $file
		echo "$dark-> "$foreground"This episode has not finished downloading yet"
		echo "$dark-> "$foreground"Playback might be buggy or not work at all"
	end

	# Execute user set config function
	userfunction

	# Start mpv
	eval {$playercommand} (string escape $mediadir/$path/$file)
end


## EXECUTE

# Initialize default option values
set debug false
set realias false

# Load config
if not test -f $configdir/config -a -f $configdir/list
	echo "$configdir/config or $configdir/list not found." >/dev/stderr
	echo "Move /usr/share/neet/config to $configdir, and create a list." >/dev/stderr
	exit 1
end
source $configdir/config

# Load colors
set foreground (set_color $foreground)
set bright (set_color $bright)
set dark (set_color $dark)

if test (count $argv) -ge 1
	getopts $argv | while read -l opt val
		switch $opt
			case h help
				echo -e 'Usage: neet [options]\n'
				echo 'options:'
				echo '  -a,   --alias           reinitialize alias'
				echo '  -d,   --debug           print some helpful debug ouput'
				echo '  -e,   --edit            edit list'
				echo '  -n,   --next            set and play next episode'
				echo '  -p,   --previous        set and play previous episode'
				echo '  -s,   --set             set and play specified episode'
				echo '  -h,   --help            print help and exit'
				exit 0
			case a alias
				set realias true
				info
			case d debug
				set debug true
				info
			case e edit
				eval $EDITOR $configdir/list
				exit 0
			case n next
				info

				if test -n $val
					if string match -q -r '^[0-9]*$' $val
						set increment (math $current + $val)
					else
						echo "Increment episode value is not a number." >/dev/stderr
						exit 1
					end
				else
					set increment (math $current + 1)
				end

				if test $increment -le $total
					sed -i "s/+ $current\/$total/+ $increment\/$total/" "$configdir/list"
					set current $increment
				else
					echo "Episode $total is the last episode." >/dev/stderr
					exit 1
				end
			case p previous
				info

				if test -n $val
					if string match -q -r '^[0-9]*$' $val
						set decrement (math $current - $val)
					else
						echo "Decrement episode value is not a number." >/dev/stderr
						exit 1
					end
				else
					set decrement (math $current - 1)
				end

				if test $decrement -ge 1
					sed -i "s/+ $current\/$total/+ $decrement\/$total/" $configdir/list
					set current $decrement
				else
					echo 'Episode 1 is the first episode.' >/dev/stderr
					exit 1
				end
			case s set
				info

				if test -n $val
					if string match -q -r '^[0-9]*$' $val
						if test $val -ge 1 -a $val -le $total
							sed -i "s/+ $current\/$total/+ $val\/$total/" $configdir/list
							set current $val
						else
							echo "please specify an episode between 1 and $total." >/dev/stderr
							exit 1
						end
					else
						echo "Set episode value is not a number." >/dev/stderr
						exit 1
					end
				else
					echo "Please specify a set episode number." >/dev/stderr
					exit 1
				end
			case '*'
				echo 'Invalid option, use -h for help.' >/dev/stderr
				exit 1
		end
	end
else
	info
end

directory
episode
play
